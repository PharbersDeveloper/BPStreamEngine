/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pharbers.kafka.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EsSinkJobSubmit extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4236239516446180641L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EsSinkJobSubmit\",\"namespace\":\"com.pharbers.kafka.schema\",\"fields\":[{\"name\":\"indexName\",\"type\":\"string\"},{\"name\":\"metadataPath\",\"type\":\"string\"},{\"name\":\"filesPath\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence indexName;
  @Deprecated public java.lang.CharSequence metadataPath;
  @Deprecated public java.lang.CharSequence filesPath;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EsSinkJobSubmit() {}

  /**
   * All-args constructor.
   * @param indexName The new value for indexName
   * @param metadataPath The new value for metadataPath
   * @param filesPath The new value for filesPath
   */
  public EsSinkJobSubmit(java.lang.CharSequence indexName, java.lang.CharSequence metadataPath, java.lang.CharSequence filesPath) {
    this.indexName = indexName;
    this.metadataPath = metadataPath;
    this.filesPath = filesPath;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return indexName;
    case 1: return metadataPath;
    case 2: return filesPath;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: indexName = (java.lang.CharSequence)value$; break;
    case 1: metadataPath = (java.lang.CharSequence)value$; break;
    case 2: filesPath = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'indexName' field.
   * @return The value of the 'indexName' field.
   */
  public java.lang.CharSequence getIndexName() {
    return indexName;
  }

  /**
   * Sets the value of the 'indexName' field.
   * @param value the value to set.
   */
  public void setIndexName(java.lang.CharSequence value) {
    this.indexName = value;
  }

  /**
   * Gets the value of the 'metadataPath' field.
   * @return The value of the 'metadataPath' field.
   */
  public java.lang.CharSequence getMetadataPath() {
    return metadataPath;
  }

  /**
   * Sets the value of the 'metadataPath' field.
   * @param value the value to set.
   */
  public void setMetadataPath(java.lang.CharSequence value) {
    this.metadataPath = value;
  }

  /**
   * Gets the value of the 'filesPath' field.
   * @return The value of the 'filesPath' field.
   */
  public java.lang.CharSequence getFilesPath() {
    return filesPath;
  }

  /**
   * Sets the value of the 'filesPath' field.
   * @param value the value to set.
   */
  public void setFilesPath(java.lang.CharSequence value) {
    this.filesPath = value;
  }

  /**
   * Creates a new EsSinkJobSubmit RecordBuilder.
   * @return A new EsSinkJobSubmit RecordBuilder
   */
  public static com.pharbers.kafka.schema.EsSinkJobSubmit.Builder newBuilder() {
    return new com.pharbers.kafka.schema.EsSinkJobSubmit.Builder();
  }

  /**
   * Creates a new EsSinkJobSubmit RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EsSinkJobSubmit RecordBuilder
   */
  public static com.pharbers.kafka.schema.EsSinkJobSubmit.Builder newBuilder(com.pharbers.kafka.schema.EsSinkJobSubmit.Builder other) {
    return new com.pharbers.kafka.schema.EsSinkJobSubmit.Builder(other);
  }

  /**
   * Creates a new EsSinkJobSubmit RecordBuilder by copying an existing EsSinkJobSubmit instance.
   * @param other The existing instance to copy.
   * @return A new EsSinkJobSubmit RecordBuilder
   */
  public static com.pharbers.kafka.schema.EsSinkJobSubmit.Builder newBuilder(com.pharbers.kafka.schema.EsSinkJobSubmit other) {
    return new com.pharbers.kafka.schema.EsSinkJobSubmit.Builder(other);
  }

  /**
   * RecordBuilder for EsSinkJobSubmit instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EsSinkJobSubmit>
    implements org.apache.avro.data.RecordBuilder<EsSinkJobSubmit> {

    private java.lang.CharSequence indexName;
    private java.lang.CharSequence metadataPath;
    private java.lang.CharSequence filesPath;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pharbers.kafka.schema.EsSinkJobSubmit.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.indexName)) {
        this.indexName = data().deepCopy(fields()[0].schema(), other.indexName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.metadataPath)) {
        this.metadataPath = data().deepCopy(fields()[1].schema(), other.metadataPath);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.filesPath)) {
        this.filesPath = data().deepCopy(fields()[2].schema(), other.filesPath);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EsSinkJobSubmit instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pharbers.kafka.schema.EsSinkJobSubmit other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.indexName)) {
        this.indexName = data().deepCopy(fields()[0].schema(), other.indexName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.metadataPath)) {
        this.metadataPath = data().deepCopy(fields()[1].schema(), other.metadataPath);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.filesPath)) {
        this.filesPath = data().deepCopy(fields()[2].schema(), other.filesPath);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'indexName' field.
      * @return The value.
      */
    public java.lang.CharSequence getIndexName() {
      return indexName;
    }

    /**
      * Sets the value of the 'indexName' field.
      * @param value The value of 'indexName'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.EsSinkJobSubmit.Builder setIndexName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.indexName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'indexName' field has been set.
      * @return True if the 'indexName' field has been set, false otherwise.
      */
    public boolean hasIndexName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'indexName' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.EsSinkJobSubmit.Builder clearIndexName() {
      indexName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadataPath' field.
      * @return The value.
      */
    public java.lang.CharSequence getMetadataPath() {
      return metadataPath;
    }

    /**
      * Sets the value of the 'metadataPath' field.
      * @param value The value of 'metadataPath'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.EsSinkJobSubmit.Builder setMetadataPath(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.metadataPath = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'metadataPath' field has been set.
      * @return True if the 'metadataPath' field has been set, false otherwise.
      */
    public boolean hasMetadataPath() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'metadataPath' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.EsSinkJobSubmit.Builder clearMetadataPath() {
      metadataPath = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'filesPath' field.
      * @return The value.
      */
    public java.lang.CharSequence getFilesPath() {
      return filesPath;
    }

    /**
      * Sets the value of the 'filesPath' field.
      * @param value The value of 'filesPath'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.EsSinkJobSubmit.Builder setFilesPath(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.filesPath = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'filesPath' field has been set.
      * @return True if the 'filesPath' field has been set, false otherwise.
      */
    public boolean hasFilesPath() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'filesPath' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.EsSinkJobSubmit.Builder clearFilesPath() {
      filesPath = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public EsSinkJobSubmit build() {
      try {
        EsSinkJobSubmit record = new EsSinkJobSubmit();
        record.indexName = fieldSetFlags()[0] ? this.indexName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.metadataPath = fieldSetFlags()[1] ? this.metadataPath : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.filesPath = fieldSetFlags()[2] ? this.filesPath : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

}
