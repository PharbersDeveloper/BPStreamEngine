/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pharbers.kafka.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FileMetaData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4822673345212200413L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FileMetaData\",\"namespace\":\"com.pharbers.kafka.schema\",\"fields\":[{\"name\":\"runId\",\"type\":\"string\"},{\"name\":\"jobId\",\"type\":\"string\"},{\"name\":\"metaDataPath\",\"type\":\"string\"},{\"name\":\"sampleDataPath\",\"type\":\"string\"},{\"name\":\"convertType\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence runId;
  @Deprecated public java.lang.CharSequence jobId;
  @Deprecated public java.lang.CharSequence metaDataPath;
  @Deprecated public java.lang.CharSequence sampleDataPath;
  @Deprecated public java.lang.CharSequence convertType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FileMetaData() {}

  /**
   * All-args constructor.
   * @param runId The new value for runId
   * @param jobId The new value for jobId
   * @param metaDataPath The new value for metaDataPath
   * @param sampleDataPath The new value for sampleDataPath
   * @param convertType The new value for convertType
   */
  public FileMetaData(java.lang.CharSequence runId, java.lang.CharSequence jobId, java.lang.CharSequence metaDataPath, java.lang.CharSequence sampleDataPath, java.lang.CharSequence convertType) {
    this.runId = runId;
    this.jobId = jobId;
    this.metaDataPath = metaDataPath;
    this.sampleDataPath = sampleDataPath;
    this.convertType = convertType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return runId;
    case 1: return jobId;
    case 2: return metaDataPath;
    case 3: return sampleDataPath;
    case 4: return convertType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: runId = (java.lang.CharSequence)value$; break;
    case 1: jobId = (java.lang.CharSequence)value$; break;
    case 2: metaDataPath = (java.lang.CharSequence)value$; break;
    case 3: sampleDataPath = (java.lang.CharSequence)value$; break;
    case 4: convertType = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'runId' field.
   * @return The value of the 'runId' field.
   */
  public java.lang.CharSequence getRunId() {
    return runId;
  }

  /**
   * Sets the value of the 'runId' field.
   * @param value the value to set.
   */
  public void setRunId(java.lang.CharSequence value) {
    this.runId = value;
  }

  /**
   * Gets the value of the 'jobId' field.
   * @return The value of the 'jobId' field.
   */
  public java.lang.CharSequence getJobId() {
    return jobId;
  }

  /**
   * Sets the value of the 'jobId' field.
   * @param value the value to set.
   */
  public void setJobId(java.lang.CharSequence value) {
    this.jobId = value;
  }

  /**
   * Gets the value of the 'metaDataPath' field.
   * @return The value of the 'metaDataPath' field.
   */
  public java.lang.CharSequence getMetaDataPath() {
    return metaDataPath;
  }

  /**
   * Sets the value of the 'metaDataPath' field.
   * @param value the value to set.
   */
  public void setMetaDataPath(java.lang.CharSequence value) {
    this.metaDataPath = value;
  }

  /**
   * Gets the value of the 'sampleDataPath' field.
   * @return The value of the 'sampleDataPath' field.
   */
  public java.lang.CharSequence getSampleDataPath() {
    return sampleDataPath;
  }

  /**
   * Sets the value of the 'sampleDataPath' field.
   * @param value the value to set.
   */
  public void setSampleDataPath(java.lang.CharSequence value) {
    this.sampleDataPath = value;
  }

  /**
   * Gets the value of the 'convertType' field.
   * @return The value of the 'convertType' field.
   */
  public java.lang.CharSequence getConvertType() {
    return convertType;
  }

  /**
   * Sets the value of the 'convertType' field.
   * @param value the value to set.
   */
  public void setConvertType(java.lang.CharSequence value) {
    this.convertType = value;
  }

  /**
   * Creates a new FileMetaData RecordBuilder.
   * @return A new FileMetaData RecordBuilder
   */
  public static com.pharbers.kafka.schema.FileMetaData.Builder newBuilder() {
    return new com.pharbers.kafka.schema.FileMetaData.Builder();
  }

  /**
   * Creates a new FileMetaData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FileMetaData RecordBuilder
   */
  public static com.pharbers.kafka.schema.FileMetaData.Builder newBuilder(com.pharbers.kafka.schema.FileMetaData.Builder other) {
    return new com.pharbers.kafka.schema.FileMetaData.Builder(other);
  }

  /**
   * Creates a new FileMetaData RecordBuilder by copying an existing FileMetaData instance.
   * @param other The existing instance to copy.
   * @return A new FileMetaData RecordBuilder
   */
  public static com.pharbers.kafka.schema.FileMetaData.Builder newBuilder(com.pharbers.kafka.schema.FileMetaData other) {
    return new com.pharbers.kafka.schema.FileMetaData.Builder(other);
  }

  /**
   * RecordBuilder for FileMetaData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FileMetaData>
    implements org.apache.avro.data.RecordBuilder<FileMetaData> {

    private java.lang.CharSequence runId;
    private java.lang.CharSequence jobId;
    private java.lang.CharSequence metaDataPath;
    private java.lang.CharSequence sampleDataPath;
    private java.lang.CharSequence convertType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pharbers.kafka.schema.FileMetaData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.runId)) {
        this.runId = data().deepCopy(fields()[0].schema(), other.runId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.jobId)) {
        this.jobId = data().deepCopy(fields()[1].schema(), other.jobId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.metaDataPath)) {
        this.metaDataPath = data().deepCopy(fields()[2].schema(), other.metaDataPath);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sampleDataPath)) {
        this.sampleDataPath = data().deepCopy(fields()[3].schema(), other.sampleDataPath);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.convertType)) {
        this.convertType = data().deepCopy(fields()[4].schema(), other.convertType);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FileMetaData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pharbers.kafka.schema.FileMetaData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.runId)) {
        this.runId = data().deepCopy(fields()[0].schema(), other.runId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.jobId)) {
        this.jobId = data().deepCopy(fields()[1].schema(), other.jobId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.metaDataPath)) {
        this.metaDataPath = data().deepCopy(fields()[2].schema(), other.metaDataPath);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sampleDataPath)) {
        this.sampleDataPath = data().deepCopy(fields()[3].schema(), other.sampleDataPath);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.convertType)) {
        this.convertType = data().deepCopy(fields()[4].schema(), other.convertType);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'runId' field.
      * @return The value.
      */
    public java.lang.CharSequence getRunId() {
      return runId;
    }

    /**
      * Sets the value of the 'runId' field.
      * @param value The value of 'runId'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.FileMetaData.Builder setRunId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.runId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'runId' field has been set.
      * @return True if the 'runId' field has been set, false otherwise.
      */
    public boolean hasRunId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'runId' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.FileMetaData.Builder clearRunId() {
      runId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'jobId' field.
      * @return The value.
      */
    public java.lang.CharSequence getJobId() {
      return jobId;
    }

    /**
      * Sets the value of the 'jobId' field.
      * @param value The value of 'jobId'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.FileMetaData.Builder setJobId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.jobId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'jobId' field has been set.
      * @return True if the 'jobId' field has been set, false otherwise.
      */
    public boolean hasJobId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'jobId' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.FileMetaData.Builder clearJobId() {
      jobId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'metaDataPath' field.
      * @return The value.
      */
    public java.lang.CharSequence getMetaDataPath() {
      return metaDataPath;
    }

    /**
      * Sets the value of the 'metaDataPath' field.
      * @param value The value of 'metaDataPath'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.FileMetaData.Builder setMetaDataPath(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.metaDataPath = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'metaDataPath' field has been set.
      * @return True if the 'metaDataPath' field has been set, false otherwise.
      */
    public boolean hasMetaDataPath() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'metaDataPath' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.FileMetaData.Builder clearMetaDataPath() {
      metaDataPath = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleDataPath' field.
      * @return The value.
      */
    public java.lang.CharSequence getSampleDataPath() {
      return sampleDataPath;
    }

    /**
      * Sets the value of the 'sampleDataPath' field.
      * @param value The value of 'sampleDataPath'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.FileMetaData.Builder setSampleDataPath(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.sampleDataPath = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleDataPath' field has been set.
      * @return True if the 'sampleDataPath' field has been set, false otherwise.
      */
    public boolean hasSampleDataPath() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sampleDataPath' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.FileMetaData.Builder clearSampleDataPath() {
      sampleDataPath = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'convertType' field.
      * @return The value.
      */
    public java.lang.CharSequence getConvertType() {
      return convertType;
    }

    /**
      * Sets the value of the 'convertType' field.
      * @param value The value of 'convertType'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.FileMetaData.Builder setConvertType(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.convertType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'convertType' field has been set.
      * @return True if the 'convertType' field has been set, false otherwise.
      */
    public boolean hasConvertType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'convertType' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.FileMetaData.Builder clearConvertType() {
      convertType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public FileMetaData build() {
      try {
        FileMetaData record = new FileMetaData();
        record.runId = fieldSetFlags()[0] ? this.runId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.jobId = fieldSetFlags()[1] ? this.jobId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.metaDataPath = fieldSetFlags()[2] ? this.metaDataPath : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.sampleDataPath = fieldSetFlags()[3] ? this.sampleDataPath : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.convertType = fieldSetFlags()[4] ? this.convertType : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

}
