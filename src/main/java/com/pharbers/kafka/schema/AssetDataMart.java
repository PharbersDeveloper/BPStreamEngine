/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pharbers.kafka.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AssetDataMart extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4812724468237582422L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AssetDataMart\",\"namespace\":\"com.pharbers.kafka.schema\",\"fields\":[{\"name\":\"assetName\",\"type\":\"string\"},{\"name\":\"assetDescription\",\"type\":\"string\"},{\"name\":\"assetVersion\",\"type\":\"string\"},{\"name\":\"assetDataType\",\"type\":\"string\"},{\"name\":\"providers\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"markets\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"molecules\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"dataCover\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"geoCover\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"labels\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"dfs\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"martName\",\"type\":\"string\"},{\"name\":\"martUrl\",\"type\":\"string\"},{\"name\":\"martDataType\",\"type\":\"string\"},{\"name\":\"saveMode\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence assetName;
  @Deprecated public java.lang.CharSequence assetDescription;
  @Deprecated public java.lang.CharSequence assetVersion;
  @Deprecated public java.lang.CharSequence assetDataType;
  @Deprecated public java.util.List<java.lang.CharSequence> providers;
  @Deprecated public java.util.List<java.lang.CharSequence> markets;
  @Deprecated public java.util.List<java.lang.CharSequence> molecules;
  @Deprecated public java.util.List<java.lang.CharSequence> dataCover;
  @Deprecated public java.util.List<java.lang.CharSequence> geoCover;
  @Deprecated public java.util.List<java.lang.CharSequence> labels;
  @Deprecated public java.util.List<java.lang.CharSequence> dfs;
  @Deprecated public java.lang.CharSequence martName;
  @Deprecated public java.lang.CharSequence martUrl;
  @Deprecated public java.lang.CharSequence martDataType;
  @Deprecated public java.lang.CharSequence saveMode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AssetDataMart() {}

  /**
   * All-args constructor.
   * @param assetName The new value for assetName
   * @param assetDescription The new value for assetDescription
   * @param assetVersion The new value for assetVersion
   * @param assetDataType The new value for assetDataType
   * @param providers The new value for providers
   * @param markets The new value for markets
   * @param molecules The new value for molecules
   * @param dataCover The new value for dataCover
   * @param geoCover The new value for geoCover
   * @param labels The new value for labels
   * @param dfs The new value for dfs
   * @param martName The new value for martName
   * @param martUrl The new value for martUrl
   * @param martDataType The new value for martDataType
   * @param saveMode The new value for saveMode
   */
  public AssetDataMart(java.lang.CharSequence assetName, java.lang.CharSequence assetDescription, java.lang.CharSequence assetVersion, java.lang.CharSequence assetDataType, java.util.List<java.lang.CharSequence> providers, java.util.List<java.lang.CharSequence> markets, java.util.List<java.lang.CharSequence> molecules, java.util.List<java.lang.CharSequence> dataCover, java.util.List<java.lang.CharSequence> geoCover, java.util.List<java.lang.CharSequence> labels, java.util.List<java.lang.CharSequence> dfs, java.lang.CharSequence martName, java.lang.CharSequence martUrl, java.lang.CharSequence martDataType, java.lang.CharSequence saveMode) {
    this.assetName = assetName;
    this.assetDescription = assetDescription;
    this.assetVersion = assetVersion;
    this.assetDataType = assetDataType;
    this.providers = providers;
    this.markets = markets;
    this.molecules = molecules;
    this.dataCover = dataCover;
    this.geoCover = geoCover;
    this.labels = labels;
    this.dfs = dfs;
    this.martName = martName;
    this.martUrl = martUrl;
    this.martDataType = martDataType;
    this.saveMode = saveMode;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return assetName;
    case 1: return assetDescription;
    case 2: return assetVersion;
    case 3: return assetDataType;
    case 4: return providers;
    case 5: return markets;
    case 6: return molecules;
    case 7: return dataCover;
    case 8: return geoCover;
    case 9: return labels;
    case 10: return dfs;
    case 11: return martName;
    case 12: return martUrl;
    case 13: return martDataType;
    case 14: return saveMode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: assetName = (java.lang.CharSequence)value$; break;
    case 1: assetDescription = (java.lang.CharSequence)value$; break;
    case 2: assetVersion = (java.lang.CharSequence)value$; break;
    case 3: assetDataType = (java.lang.CharSequence)value$; break;
    case 4: providers = (java.util.List<java.lang.CharSequence>)value$; break;
    case 5: markets = (java.util.List<java.lang.CharSequence>)value$; break;
    case 6: molecules = (java.util.List<java.lang.CharSequence>)value$; break;
    case 7: dataCover = (java.util.List<java.lang.CharSequence>)value$; break;
    case 8: geoCover = (java.util.List<java.lang.CharSequence>)value$; break;
    case 9: labels = (java.util.List<java.lang.CharSequence>)value$; break;
    case 10: dfs = (java.util.List<java.lang.CharSequence>)value$; break;
    case 11: martName = (java.lang.CharSequence)value$; break;
    case 12: martUrl = (java.lang.CharSequence)value$; break;
    case 13: martDataType = (java.lang.CharSequence)value$; break;
    case 14: saveMode = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'assetName' field.
   * @return The value of the 'assetName' field.
   */
  public java.lang.CharSequence getAssetName() {
    return assetName;
  }

  /**
   * Sets the value of the 'assetName' field.
   * @param value the value to set.
   */
  public void setAssetName(java.lang.CharSequence value) {
    this.assetName = value;
  }

  /**
   * Gets the value of the 'assetDescription' field.
   * @return The value of the 'assetDescription' field.
   */
  public java.lang.CharSequence getAssetDescription() {
    return assetDescription;
  }

  /**
   * Sets the value of the 'assetDescription' field.
   * @param value the value to set.
   */
  public void setAssetDescription(java.lang.CharSequence value) {
    this.assetDescription = value;
  }

  /**
   * Gets the value of the 'assetVersion' field.
   * @return The value of the 'assetVersion' field.
   */
  public java.lang.CharSequence getAssetVersion() {
    return assetVersion;
  }

  /**
   * Sets the value of the 'assetVersion' field.
   * @param value the value to set.
   */
  public void setAssetVersion(java.lang.CharSequence value) {
    this.assetVersion = value;
  }

  /**
   * Gets the value of the 'assetDataType' field.
   * @return The value of the 'assetDataType' field.
   */
  public java.lang.CharSequence getAssetDataType() {
    return assetDataType;
  }

  /**
   * Sets the value of the 'assetDataType' field.
   * @param value the value to set.
   */
  public void setAssetDataType(java.lang.CharSequence value) {
    this.assetDataType = value;
  }

  /**
   * Gets the value of the 'providers' field.
   * @return The value of the 'providers' field.
   */
  public java.util.List<java.lang.CharSequence> getProviders() {
    return providers;
  }

  /**
   * Sets the value of the 'providers' field.
   * @param value the value to set.
   */
  public void setProviders(java.util.List<java.lang.CharSequence> value) {
    this.providers = value;
  }

  /**
   * Gets the value of the 'markets' field.
   * @return The value of the 'markets' field.
   */
  public java.util.List<java.lang.CharSequence> getMarkets() {
    return markets;
  }

  /**
   * Sets the value of the 'markets' field.
   * @param value the value to set.
   */
  public void setMarkets(java.util.List<java.lang.CharSequence> value) {
    this.markets = value;
  }

  /**
   * Gets the value of the 'molecules' field.
   * @return The value of the 'molecules' field.
   */
  public java.util.List<java.lang.CharSequence> getMolecules() {
    return molecules;
  }

  /**
   * Sets the value of the 'molecules' field.
   * @param value the value to set.
   */
  public void setMolecules(java.util.List<java.lang.CharSequence> value) {
    this.molecules = value;
  }

  /**
   * Gets the value of the 'dataCover' field.
   * @return The value of the 'dataCover' field.
   */
  public java.util.List<java.lang.CharSequence> getDataCover() {
    return dataCover;
  }

  /**
   * Sets the value of the 'dataCover' field.
   * @param value the value to set.
   */
  public void setDataCover(java.util.List<java.lang.CharSequence> value) {
    this.dataCover = value;
  }

  /**
   * Gets the value of the 'geoCover' field.
   * @return The value of the 'geoCover' field.
   */
  public java.util.List<java.lang.CharSequence> getGeoCover() {
    return geoCover;
  }

  /**
   * Sets the value of the 'geoCover' field.
   * @param value the value to set.
   */
  public void setGeoCover(java.util.List<java.lang.CharSequence> value) {
    this.geoCover = value;
  }

  /**
   * Gets the value of the 'labels' field.
   * @return The value of the 'labels' field.
   */
  public java.util.List<java.lang.CharSequence> getLabels() {
    return labels;
  }

  /**
   * Sets the value of the 'labels' field.
   * @param value the value to set.
   */
  public void setLabels(java.util.List<java.lang.CharSequence> value) {
    this.labels = value;
  }

  /**
   * Gets the value of the 'dfs' field.
   * @return The value of the 'dfs' field.
   */
  public java.util.List<java.lang.CharSequence> getDfs() {
    return dfs;
  }

  /**
   * Sets the value of the 'dfs' field.
   * @param value the value to set.
   */
  public void setDfs(java.util.List<java.lang.CharSequence> value) {
    this.dfs = value;
  }

  /**
   * Gets the value of the 'martName' field.
   * @return The value of the 'martName' field.
   */
  public java.lang.CharSequence getMartName() {
    return martName;
  }

  /**
   * Sets the value of the 'martName' field.
   * @param value the value to set.
   */
  public void setMartName(java.lang.CharSequence value) {
    this.martName = value;
  }

  /**
   * Gets the value of the 'martUrl' field.
   * @return The value of the 'martUrl' field.
   */
  public java.lang.CharSequence getMartUrl() {
    return martUrl;
  }

  /**
   * Sets the value of the 'martUrl' field.
   * @param value the value to set.
   */
  public void setMartUrl(java.lang.CharSequence value) {
    this.martUrl = value;
  }

  /**
   * Gets the value of the 'martDataType' field.
   * @return The value of the 'martDataType' field.
   */
  public java.lang.CharSequence getMartDataType() {
    return martDataType;
  }

  /**
   * Sets the value of the 'martDataType' field.
   * @param value the value to set.
   */
  public void setMartDataType(java.lang.CharSequence value) {
    this.martDataType = value;
  }

  /**
   * Gets the value of the 'saveMode' field.
   * @return The value of the 'saveMode' field.
   */
  public java.lang.CharSequence getSaveMode() {
    return saveMode;
  }

  /**
   * Sets the value of the 'saveMode' field.
   * @param value the value to set.
   */
  public void setSaveMode(java.lang.CharSequence value) {
    this.saveMode = value;
  }

  /**
   * Creates a new AssetDataMart RecordBuilder.
   * @return A new AssetDataMart RecordBuilder
   */
  public static com.pharbers.kafka.schema.AssetDataMart.Builder newBuilder() {
    return new com.pharbers.kafka.schema.AssetDataMart.Builder();
  }

  /**
   * Creates a new AssetDataMart RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AssetDataMart RecordBuilder
   */
  public static com.pharbers.kafka.schema.AssetDataMart.Builder newBuilder(com.pharbers.kafka.schema.AssetDataMart.Builder other) {
    return new com.pharbers.kafka.schema.AssetDataMart.Builder(other);
  }

  /**
   * Creates a new AssetDataMart RecordBuilder by copying an existing AssetDataMart instance.
   * @param other The existing instance to copy.
   * @return A new AssetDataMart RecordBuilder
   */
  public static com.pharbers.kafka.schema.AssetDataMart.Builder newBuilder(com.pharbers.kafka.schema.AssetDataMart other) {
    return new com.pharbers.kafka.schema.AssetDataMart.Builder(other);
  }

  /**
   * RecordBuilder for AssetDataMart instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AssetDataMart>
    implements org.apache.avro.data.RecordBuilder<AssetDataMart> {

    private java.lang.CharSequence assetName;
    private java.lang.CharSequence assetDescription;
    private java.lang.CharSequence assetVersion;
    private java.lang.CharSequence assetDataType;
    private java.util.List<java.lang.CharSequence> providers;
    private java.util.List<java.lang.CharSequence> markets;
    private java.util.List<java.lang.CharSequence> molecules;
    private java.util.List<java.lang.CharSequence> dataCover;
    private java.util.List<java.lang.CharSequence> geoCover;
    private java.util.List<java.lang.CharSequence> labels;
    private java.util.List<java.lang.CharSequence> dfs;
    private java.lang.CharSequence martName;
    private java.lang.CharSequence martUrl;
    private java.lang.CharSequence martDataType;
    private java.lang.CharSequence saveMode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pharbers.kafka.schema.AssetDataMart.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.assetName)) {
        this.assetName = data().deepCopy(fields()[0].schema(), other.assetName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.assetDescription)) {
        this.assetDescription = data().deepCopy(fields()[1].schema(), other.assetDescription);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.assetVersion)) {
        this.assetVersion = data().deepCopy(fields()[2].schema(), other.assetVersion);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.assetDataType)) {
        this.assetDataType = data().deepCopy(fields()[3].schema(), other.assetDataType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.providers)) {
        this.providers = data().deepCopy(fields()[4].schema(), other.providers);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.markets)) {
        this.markets = data().deepCopy(fields()[5].schema(), other.markets);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.molecules)) {
        this.molecules = data().deepCopy(fields()[6].schema(), other.molecules);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.dataCover)) {
        this.dataCover = data().deepCopy(fields()[7].schema(), other.dataCover);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.geoCover)) {
        this.geoCover = data().deepCopy(fields()[8].schema(), other.geoCover);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.labels)) {
        this.labels = data().deepCopy(fields()[9].schema(), other.labels);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.dfs)) {
        this.dfs = data().deepCopy(fields()[10].schema(), other.dfs);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.martName)) {
        this.martName = data().deepCopy(fields()[11].schema(), other.martName);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.martUrl)) {
        this.martUrl = data().deepCopy(fields()[12].schema(), other.martUrl);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.martDataType)) {
        this.martDataType = data().deepCopy(fields()[13].schema(), other.martDataType);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.saveMode)) {
        this.saveMode = data().deepCopy(fields()[14].schema(), other.saveMode);
        fieldSetFlags()[14] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AssetDataMart instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pharbers.kafka.schema.AssetDataMart other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.assetName)) {
        this.assetName = data().deepCopy(fields()[0].schema(), other.assetName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.assetDescription)) {
        this.assetDescription = data().deepCopy(fields()[1].schema(), other.assetDescription);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.assetVersion)) {
        this.assetVersion = data().deepCopy(fields()[2].schema(), other.assetVersion);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.assetDataType)) {
        this.assetDataType = data().deepCopy(fields()[3].schema(), other.assetDataType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.providers)) {
        this.providers = data().deepCopy(fields()[4].schema(), other.providers);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.markets)) {
        this.markets = data().deepCopy(fields()[5].schema(), other.markets);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.molecules)) {
        this.molecules = data().deepCopy(fields()[6].schema(), other.molecules);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.dataCover)) {
        this.dataCover = data().deepCopy(fields()[7].schema(), other.dataCover);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.geoCover)) {
        this.geoCover = data().deepCopy(fields()[8].schema(), other.geoCover);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.labels)) {
        this.labels = data().deepCopy(fields()[9].schema(), other.labels);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.dfs)) {
        this.dfs = data().deepCopy(fields()[10].schema(), other.dfs);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.martName)) {
        this.martName = data().deepCopy(fields()[11].schema(), other.martName);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.martUrl)) {
        this.martUrl = data().deepCopy(fields()[12].schema(), other.martUrl);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.martDataType)) {
        this.martDataType = data().deepCopy(fields()[13].schema(), other.martDataType);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.saveMode)) {
        this.saveMode = data().deepCopy(fields()[14].schema(), other.saveMode);
        fieldSetFlags()[14] = true;
      }
    }

    /**
      * Gets the value of the 'assetName' field.
      * @return The value.
      */
    public java.lang.CharSequence getAssetName() {
      return assetName;
    }

    /**
      * Sets the value of the 'assetName' field.
      * @param value The value of 'assetName'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setAssetName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.assetName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'assetName' field has been set.
      * @return True if the 'assetName' field has been set, false otherwise.
      */
    public boolean hasAssetName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'assetName' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearAssetName() {
      assetName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'assetDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getAssetDescription() {
      return assetDescription;
    }

    /**
      * Sets the value of the 'assetDescription' field.
      * @param value The value of 'assetDescription'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setAssetDescription(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.assetDescription = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'assetDescription' field has been set.
      * @return True if the 'assetDescription' field has been set, false otherwise.
      */
    public boolean hasAssetDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'assetDescription' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearAssetDescription() {
      assetDescription = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'assetVersion' field.
      * @return The value.
      */
    public java.lang.CharSequence getAssetVersion() {
      return assetVersion;
    }

    /**
      * Sets the value of the 'assetVersion' field.
      * @param value The value of 'assetVersion'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setAssetVersion(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.assetVersion = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'assetVersion' field has been set.
      * @return True if the 'assetVersion' field has been set, false otherwise.
      */
    public boolean hasAssetVersion() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'assetVersion' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearAssetVersion() {
      assetVersion = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'assetDataType' field.
      * @return The value.
      */
    public java.lang.CharSequence getAssetDataType() {
      return assetDataType;
    }

    /**
      * Sets the value of the 'assetDataType' field.
      * @param value The value of 'assetDataType'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setAssetDataType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.assetDataType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'assetDataType' field has been set.
      * @return True if the 'assetDataType' field has been set, false otherwise.
      */
    public boolean hasAssetDataType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'assetDataType' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearAssetDataType() {
      assetDataType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'providers' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getProviders() {
      return providers;
    }

    /**
      * Sets the value of the 'providers' field.
      * @param value The value of 'providers'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setProviders(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.providers = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'providers' field has been set.
      * @return True if the 'providers' field has been set, false otherwise.
      */
    public boolean hasProviders() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'providers' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearProviders() {
      providers = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'markets' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getMarkets() {
      return markets;
    }

    /**
      * Sets the value of the 'markets' field.
      * @param value The value of 'markets'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setMarkets(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.markets = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'markets' field has been set.
      * @return True if the 'markets' field has been set, false otherwise.
      */
    public boolean hasMarkets() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'markets' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearMarkets() {
      markets = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'molecules' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getMolecules() {
      return molecules;
    }

    /**
      * Sets the value of the 'molecules' field.
      * @param value The value of 'molecules'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setMolecules(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.molecules = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'molecules' field has been set.
      * @return True if the 'molecules' field has been set, false otherwise.
      */
    public boolean hasMolecules() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'molecules' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearMolecules() {
      molecules = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataCover' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getDataCover() {
      return dataCover;
    }

    /**
      * Sets the value of the 'dataCover' field.
      * @param value The value of 'dataCover'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setDataCover(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.dataCover = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'dataCover' field has been set.
      * @return True if the 'dataCover' field has been set, false otherwise.
      */
    public boolean hasDataCover() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'dataCover' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearDataCover() {
      dataCover = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'geoCover' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getGeoCover() {
      return geoCover;
    }

    /**
      * Sets the value of the 'geoCover' field.
      * @param value The value of 'geoCover'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setGeoCover(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[8], value);
      this.geoCover = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'geoCover' field has been set.
      * @return True if the 'geoCover' field has been set, false otherwise.
      */
    public boolean hasGeoCover() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'geoCover' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearGeoCover() {
      geoCover = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'labels' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getLabels() {
      return labels;
    }

    /**
      * Sets the value of the 'labels' field.
      * @param value The value of 'labels'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setLabels(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[9], value);
      this.labels = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'labels' field has been set.
      * @return True if the 'labels' field has been set, false otherwise.
      */
    public boolean hasLabels() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'labels' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearLabels() {
      labels = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'dfs' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getDfs() {
      return dfs;
    }

    /**
      * Sets the value of the 'dfs' field.
      * @param value The value of 'dfs'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setDfs(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[10], value);
      this.dfs = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'dfs' field has been set.
      * @return True if the 'dfs' field has been set, false otherwise.
      */
    public boolean hasDfs() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'dfs' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearDfs() {
      dfs = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'martName' field.
      * @return The value.
      */
    public java.lang.CharSequence getMartName() {
      return martName;
    }

    /**
      * Sets the value of the 'martName' field.
      * @param value The value of 'martName'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setMartName(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.martName = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'martName' field has been set.
      * @return True if the 'martName' field has been set, false otherwise.
      */
    public boolean hasMartName() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'martName' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearMartName() {
      martName = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'martUrl' field.
      * @return The value.
      */
    public java.lang.CharSequence getMartUrl() {
      return martUrl;
    }

    /**
      * Sets the value of the 'martUrl' field.
      * @param value The value of 'martUrl'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setMartUrl(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.martUrl = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'martUrl' field has been set.
      * @return True if the 'martUrl' field has been set, false otherwise.
      */
    public boolean hasMartUrl() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'martUrl' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearMartUrl() {
      martUrl = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'martDataType' field.
      * @return The value.
      */
    public java.lang.CharSequence getMartDataType() {
      return martDataType;
    }

    /**
      * Sets the value of the 'martDataType' field.
      * @param value The value of 'martDataType'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setMartDataType(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.martDataType = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'martDataType' field has been set.
      * @return True if the 'martDataType' field has been set, false otherwise.
      */
    public boolean hasMartDataType() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'martDataType' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearMartDataType() {
      martDataType = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'saveMode' field.
      * @return The value.
      */
    public java.lang.CharSequence getSaveMode() {
      return saveMode;
    }

    /**
      * Sets the value of the 'saveMode' field.
      * @param value The value of 'saveMode'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder setSaveMode(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.saveMode = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'saveMode' field has been set.
      * @return True if the 'saveMode' field has been set, false otherwise.
      */
    public boolean hasSaveMode() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'saveMode' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.AssetDataMart.Builder clearSaveMode() {
      saveMode = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    public AssetDataMart build() {
      try {
        AssetDataMart record = new AssetDataMart();
        record.assetName = fieldSetFlags()[0] ? this.assetName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.assetDescription = fieldSetFlags()[1] ? this.assetDescription : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.assetVersion = fieldSetFlags()[2] ? this.assetVersion : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.assetDataType = fieldSetFlags()[3] ? this.assetDataType : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.providers = fieldSetFlags()[4] ? this.providers : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        record.markets = fieldSetFlags()[5] ? this.markets : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[5]);
        record.molecules = fieldSetFlags()[6] ? this.molecules : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[6]);
        record.dataCover = fieldSetFlags()[7] ? this.dataCover : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[7]);
        record.geoCover = fieldSetFlags()[8] ? this.geoCover : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[8]);
        record.labels = fieldSetFlags()[9] ? this.labels : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[9]);
        record.dfs = fieldSetFlags()[10] ? this.dfs : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[10]);
        record.martName = fieldSetFlags()[11] ? this.martName : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.martUrl = fieldSetFlags()[12] ? this.martUrl : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.martDataType = fieldSetFlags()[13] ? this.martDataType : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.saveMode = fieldSetFlags()[14] ? this.saveMode : (java.lang.CharSequence) defaultValue(fields()[14]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);


  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);


}
