/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pharbers.kafka.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DataSet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5357404456338904112L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataSet\",\"namespace\":\"com.pharbers.kafka.schema\",\"fields\":[{\"name\":\"parentIds\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"jobId\",\"type\":\"string\"},{\"name\":\"colName\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"tabName\",\"type\":\"string\"},{\"name\":\"length\",\"type\":\"int\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.CharSequence> parentIds;
  @Deprecated public java.lang.CharSequence jobId;
  @Deprecated public java.util.List<java.lang.CharSequence> colName;
  @Deprecated public java.lang.CharSequence tabName;
  @Deprecated public int length;
  @Deprecated public java.lang.CharSequence url;
  @Deprecated public java.lang.CharSequence description;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataSet() {}

  /**
   * All-args constructor.
   * @param parentIds The new value for parentIds
   * @param jobId The new value for jobId
   * @param colName The new value for colName
   * @param tabName The new value for tabName
   * @param length The new value for length
   * @param url The new value for url
   * @param description The new value for description
   */
  public DataSet(java.util.List<java.lang.CharSequence> parentIds, java.lang.CharSequence jobId, java.util.List<java.lang.CharSequence> colName, java.lang.CharSequence tabName, java.lang.Integer length, java.lang.CharSequence url, java.lang.CharSequence description) {
    this.parentIds = parentIds;
    this.jobId = jobId;
    this.colName = colName;
    this.tabName = tabName;
    this.length = length;
    this.url = url;
    this.description = description;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return parentIds;
    case 1: return jobId;
    case 2: return colName;
    case 3: return tabName;
    case 4: return length;
    case 5: return url;
    case 6: return description;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: parentIds = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: jobId = (java.lang.CharSequence)value$; break;
    case 2: colName = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: tabName = (java.lang.CharSequence)value$; break;
    case 4: length = (java.lang.Integer)value$; break;
    case 5: url = (java.lang.CharSequence)value$; break;
    case 6: description = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'parentIds' field.
   * @return The value of the 'parentIds' field.
   */
  public java.util.List<java.lang.CharSequence> getParentIds() {
    return parentIds;
  }

  /**
   * Sets the value of the 'parentIds' field.
   * @param value the value to set.
   */
  public void setParentIds(java.util.List<java.lang.CharSequence> value) {
    this.parentIds = value;
  }

  /**
   * Gets the value of the 'jobId' field.
   * @return The value of the 'jobId' field.
   */
  public java.lang.CharSequence getJobId() {
    return jobId;
  }

  /**
   * Sets the value of the 'jobId' field.
   * @param value the value to set.
   */
  public void setJobId(java.lang.CharSequence value) {
    this.jobId = value;
  }

  /**
   * Gets the value of the 'colName' field.
   * @return The value of the 'colName' field.
   */
  public java.util.List<java.lang.CharSequence> getColName() {
    return colName;
  }

  /**
   * Sets the value of the 'colName' field.
   * @param value the value to set.
   */
  public void setColName(java.util.List<java.lang.CharSequence> value) {
    this.colName = value;
  }

  /**
   * Gets the value of the 'tabName' field.
   * @return The value of the 'tabName' field.
   */
  public java.lang.CharSequence getTabName() {
    return tabName;
  }

  /**
   * Sets the value of the 'tabName' field.
   * @param value the value to set.
   */
  public void setTabName(java.lang.CharSequence value) {
    this.tabName = value;
  }

  /**
   * Gets the value of the 'length' field.
   * @return The value of the 'length' field.
   */
  public java.lang.Integer getLength() {
    return length;
  }

  /**
   * Sets the value of the 'length' field.
   * @param value the value to set.
   */
  public void setLength(java.lang.Integer value) {
    this.length = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Creates a new DataSet RecordBuilder.
   * @return A new DataSet RecordBuilder
   */
  public static com.pharbers.kafka.schema.DataSet.Builder newBuilder() {
    return new com.pharbers.kafka.schema.DataSet.Builder();
  }

  /**
   * Creates a new DataSet RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataSet RecordBuilder
   */
  public static com.pharbers.kafka.schema.DataSet.Builder newBuilder(com.pharbers.kafka.schema.DataSet.Builder other) {
    return new com.pharbers.kafka.schema.DataSet.Builder(other);
  }

  /**
   * Creates a new DataSet RecordBuilder by copying an existing DataSet instance.
   * @param other The existing instance to copy.
   * @return A new DataSet RecordBuilder
   */
  public static com.pharbers.kafka.schema.DataSet.Builder newBuilder(com.pharbers.kafka.schema.DataSet other) {
    return new com.pharbers.kafka.schema.DataSet.Builder(other);
  }

  /**
   * RecordBuilder for DataSet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataSet>
    implements org.apache.avro.data.RecordBuilder<DataSet> {

    private java.util.List<java.lang.CharSequence> parentIds;
    private java.lang.CharSequence jobId;
    private java.util.List<java.lang.CharSequence> colName;
    private java.lang.CharSequence tabName;
    private int length;
    private java.lang.CharSequence url;
    private java.lang.CharSequence description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pharbers.kafka.schema.DataSet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.parentIds)) {
        this.parentIds = data().deepCopy(fields()[0].schema(), other.parentIds);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.jobId)) {
        this.jobId = data().deepCopy(fields()[1].schema(), other.jobId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.colName)) {
        this.colName = data().deepCopy(fields()[2].schema(), other.colName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tabName)) {
        this.tabName = data().deepCopy(fields()[3].schema(), other.tabName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.length)) {
        this.length = data().deepCopy(fields()[4].schema(), other.length);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.url)) {
        this.url = data().deepCopy(fields()[5].schema(), other.url);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.description)) {
        this.description = data().deepCopy(fields()[6].schema(), other.description);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DataSet instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pharbers.kafka.schema.DataSet other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.parentIds)) {
        this.parentIds = data().deepCopy(fields()[0].schema(), other.parentIds);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.jobId)) {
        this.jobId = data().deepCopy(fields()[1].schema(), other.jobId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.colName)) {
        this.colName = data().deepCopy(fields()[2].schema(), other.colName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tabName)) {
        this.tabName = data().deepCopy(fields()[3].schema(), other.tabName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.length)) {
        this.length = data().deepCopy(fields()[4].schema(), other.length);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.url)) {
        this.url = data().deepCopy(fields()[5].schema(), other.url);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.description)) {
        this.description = data().deepCopy(fields()[6].schema(), other.description);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'parentIds' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getParentIds() {
      return parentIds;
    }

    /**
      * Sets the value of the 'parentIds' field.
      * @param value The value of 'parentIds'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.DataSet.Builder setParentIds(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.parentIds = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'parentIds' field has been set.
      * @return True if the 'parentIds' field has been set, false otherwise.
      */
    public boolean hasParentIds() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'parentIds' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.DataSet.Builder clearParentIds() {
      parentIds = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'jobId' field.
      * @return The value.
      */
    public java.lang.CharSequence getJobId() {
      return jobId;
    }

    /**
      * Sets the value of the 'jobId' field.
      * @param value The value of 'jobId'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.DataSet.Builder setJobId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.jobId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'jobId' field has been set.
      * @return True if the 'jobId' field has been set, false otherwise.
      */
    public boolean hasJobId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'jobId' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.DataSet.Builder clearJobId() {
      jobId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'colName' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getColName() {
      return colName;
    }

    /**
      * Sets the value of the 'colName' field.
      * @param value The value of 'colName'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.DataSet.Builder setColName(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.colName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'colName' field has been set.
      * @return True if the 'colName' field has been set, false otherwise.
      */
    public boolean hasColName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'colName' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.DataSet.Builder clearColName() {
      colName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tabName' field.
      * @return The value.
      */
    public java.lang.CharSequence getTabName() {
      return tabName;
    }

    /**
      * Sets the value of the 'tabName' field.
      * @param value The value of 'tabName'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.DataSet.Builder setTabName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.tabName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tabName' field has been set.
      * @return True if the 'tabName' field has been set, false otherwise.
      */
    public boolean hasTabName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tabName' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.DataSet.Builder clearTabName() {
      tabName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'length' field.
      * @return The value.
      */
    public java.lang.Integer getLength() {
      return length;
    }

    /**
      * Sets the value of the 'length' field.
      * @param value The value of 'length'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.DataSet.Builder setLength(int value) {
      validate(fields()[4], value);
      this.length = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'length' field has been set.
      * @return True if the 'length' field has been set, false otherwise.
      */
    public boolean hasLength() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'length' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.DataSet.Builder clearLength() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrl() {
      return url;
    }

    /**
      * Sets the value of the 'url' field.
      * @param value The value of 'url'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.DataSet.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.url = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'url' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.DataSet.Builder clearUrl() {
      url = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.DataSet.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.description = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.DataSet.Builder clearDescription() {
      description = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public DataSet build() {
      try {
        DataSet record = new DataSet();
        record.parentIds = fieldSetFlags()[0] ? this.parentIds : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.jobId = fieldSetFlags()[1] ? this.jobId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.colName = fieldSetFlags()[2] ? this.colName : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.tabName = fieldSetFlags()[3] ? this.tabName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.length = fieldSetFlags()[4] ? this.length : (java.lang.Integer) defaultValue(fields()[4]);
        record.url = fieldSetFlags()[5] ? this.url : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.description = fieldSetFlags()[6] ? this.description : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);


}
