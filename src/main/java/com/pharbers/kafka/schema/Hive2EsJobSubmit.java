/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pharbers.kafka.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Hive2EsJobSubmit extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4050705969596879354L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Hive2EsJobSubmit\",\"namespace\":\"com.pharbers.kafka.schema\",\"fields\":[{\"name\":\"Sql\",\"type\":\"string\"},{\"name\":\"IndexName\",\"type\":\"string\"},{\"name\":\"Strategy\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence Sql;
  @Deprecated public java.lang.CharSequence IndexName;
  @Deprecated public java.lang.CharSequence Strategy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Hive2EsJobSubmit() {}

  /**
   * All-args constructor.
   * @param Sql The new value for Sql
   * @param IndexName The new value for IndexName
   * @param Strategy The new value for Strategy
   */
  public Hive2EsJobSubmit(java.lang.CharSequence Sql, java.lang.CharSequence IndexName, java.lang.CharSequence Strategy) {
    this.Sql = Sql;
    this.IndexName = IndexName;
    this.Strategy = Strategy;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Sql;
    case 1: return IndexName;
    case 2: return Strategy;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Sql = (java.lang.CharSequence)value$; break;
    case 1: IndexName = (java.lang.CharSequence)value$; break;
    case 2: Strategy = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Sql' field.
   * @return The value of the 'Sql' field.
   */
  public java.lang.CharSequence getSql() {
    return Sql;
  }

  /**
   * Sets the value of the 'Sql' field.
   * @param value the value to set.
   */
  public void setSql(java.lang.CharSequence value) {
    this.Sql = value;
  }

  /**
   * Gets the value of the 'IndexName' field.
   * @return The value of the 'IndexName' field.
   */
  public java.lang.CharSequence getIndexName() {
    return IndexName;
  }

  /**
   * Sets the value of the 'IndexName' field.
   * @param value the value to set.
   */
  public void setIndexName(java.lang.CharSequence value) {
    this.IndexName = value;
  }

  /**
   * Gets the value of the 'Strategy' field.
   * @return The value of the 'Strategy' field.
   */
  public java.lang.CharSequence getStrategy() {
    return Strategy;
  }

  /**
   * Sets the value of the 'Strategy' field.
   * @param value the value to set.
   */
  public void setStrategy(java.lang.CharSequence value) {
    this.Strategy = value;
  }

  /**
   * Creates a new Hive2EsJobSubmit RecordBuilder.
   * @return A new Hive2EsJobSubmit RecordBuilder
   */
  public static com.pharbers.kafka.schema.Hive2EsJobSubmit.Builder newBuilder() {
    return new com.pharbers.kafka.schema.Hive2EsJobSubmit.Builder();
  }

  /**
   * Creates a new Hive2EsJobSubmit RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Hive2EsJobSubmit RecordBuilder
   */
  public static com.pharbers.kafka.schema.Hive2EsJobSubmit.Builder newBuilder(com.pharbers.kafka.schema.Hive2EsJobSubmit.Builder other) {
    return new com.pharbers.kafka.schema.Hive2EsJobSubmit.Builder(other);
  }

  /**
   * Creates a new Hive2EsJobSubmit RecordBuilder by copying an existing Hive2EsJobSubmit instance.
   * @param other The existing instance to copy.
   * @return A new Hive2EsJobSubmit RecordBuilder
   */
  public static com.pharbers.kafka.schema.Hive2EsJobSubmit.Builder newBuilder(com.pharbers.kafka.schema.Hive2EsJobSubmit other) {
    return new com.pharbers.kafka.schema.Hive2EsJobSubmit.Builder(other);
  }

  /**
   * RecordBuilder for Hive2EsJobSubmit instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Hive2EsJobSubmit>
    implements org.apache.avro.data.RecordBuilder<Hive2EsJobSubmit> {

    private java.lang.CharSequence Sql;
    private java.lang.CharSequence IndexName;
    private java.lang.CharSequence Strategy;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pharbers.kafka.schema.Hive2EsJobSubmit.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Sql)) {
        this.Sql = data().deepCopy(fields()[0].schema(), other.Sql);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.IndexName)) {
        this.IndexName = data().deepCopy(fields()[1].schema(), other.IndexName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Strategy)) {
        this.Strategy = data().deepCopy(fields()[2].schema(), other.Strategy);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Hive2EsJobSubmit instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pharbers.kafka.schema.Hive2EsJobSubmit other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Sql)) {
        this.Sql = data().deepCopy(fields()[0].schema(), other.Sql);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.IndexName)) {
        this.IndexName = data().deepCopy(fields()[1].schema(), other.IndexName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Strategy)) {
        this.Strategy = data().deepCopy(fields()[2].schema(), other.Strategy);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'Sql' field.
      * @return The value.
      */
    public java.lang.CharSequence getSql() {
      return Sql;
    }

    /**
      * Sets the value of the 'Sql' field.
      * @param value The value of 'Sql'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.Hive2EsJobSubmit.Builder setSql(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Sql = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Sql' field has been set.
      * @return True if the 'Sql' field has been set, false otherwise.
      */
    public boolean hasSql() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Sql' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.Hive2EsJobSubmit.Builder clearSql() {
      Sql = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'IndexName' field.
      * @return The value.
      */
    public java.lang.CharSequence getIndexName() {
      return IndexName;
    }

    /**
      * Sets the value of the 'IndexName' field.
      * @param value The value of 'IndexName'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.Hive2EsJobSubmit.Builder setIndexName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.IndexName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'IndexName' field has been set.
      * @return True if the 'IndexName' field has been set, false otherwise.
      */
    public boolean hasIndexName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'IndexName' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.Hive2EsJobSubmit.Builder clearIndexName() {
      IndexName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Strategy' field.
      * @return The value.
      */
    public java.lang.CharSequence getStrategy() {
      return Strategy;
    }

    /**
      * Sets the value of the 'Strategy' field.
      * @param value The value of 'Strategy'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.Hive2EsJobSubmit.Builder setStrategy(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.Strategy = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Strategy' field has been set.
      * @return True if the 'Strategy' field has been set, false otherwise.
      */
    public boolean hasStrategy() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Strategy' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.Hive2EsJobSubmit.Builder clearStrategy() {
      Strategy = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Hive2EsJobSubmit build() {
      try {
        Hive2EsJobSubmit record = new Hive2EsJobSubmit();
        record.Sql = fieldSetFlags()[0] ? this.Sql : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.IndexName = fieldSetFlags()[1] ? this.IndexName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.Strategy = fieldSetFlags()[2] ? this.Strategy : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

}
