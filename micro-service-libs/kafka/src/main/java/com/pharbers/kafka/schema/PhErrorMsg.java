/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pharbers.kafka.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PhErrorMsg extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7781353911988409759L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PhErrorMsg\",\"namespace\":\"com.pharbers.kafka.schema\",\"fields\":[{\"name\":\"jobId\",\"type\":\"string\"},{\"name\":\"traceId\",\"type\":\"string\"},{\"name\":\"runId\",\"type\":\"string\"},{\"name\":\"productName\",\"type\":\"string\"},{\"name\":\"errorCode\",\"type\":\"string\"},{\"name\":\"errorMsg\",\"type\":\"string\"},{\"name\":\"config\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence jobId;
  @Deprecated public java.lang.CharSequence traceId;
  @Deprecated public java.lang.CharSequence runId;
  @Deprecated public java.lang.CharSequence productName;
  @Deprecated public java.lang.CharSequence errorCode;
  @Deprecated public java.lang.CharSequence errorMsg;
  @Deprecated public java.lang.CharSequence config;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PhErrorMsg() {}

  /**
   * All-args constructor.
   * @param jobId The new value for jobId
   * @param traceId The new value for traceId
   * @param runId The new value for runId
   * @param productName The new value for productName
   * @param errorCode The new value for errorCode
   * @param errorMsg The new value for errorMsg
   * @param config The new value for config
   */
  public PhErrorMsg(java.lang.CharSequence jobId, java.lang.CharSequence traceId, java.lang.CharSequence runId, java.lang.CharSequence productName, java.lang.CharSequence errorCode, java.lang.CharSequence errorMsg, java.lang.CharSequence config) {
    this.jobId = jobId;
    this.traceId = traceId;
    this.runId = runId;
    this.productName = productName;
    this.errorCode = errorCode;
    this.errorMsg = errorMsg;
    this.config = config;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return jobId;
    case 1: return traceId;
    case 2: return runId;
    case 3: return productName;
    case 4: return errorCode;
    case 5: return errorMsg;
    case 6: return config;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: jobId = (java.lang.CharSequence)value$; break;
    case 1: traceId = (java.lang.CharSequence)value$; break;
    case 2: runId = (java.lang.CharSequence)value$; break;
    case 3: productName = (java.lang.CharSequence)value$; break;
    case 4: errorCode = (java.lang.CharSequence)value$; break;
    case 5: errorMsg = (java.lang.CharSequence)value$; break;
    case 6: config = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'jobId' field.
   * @return The value of the 'jobId' field.
   */
  public java.lang.CharSequence getJobId() {
    return jobId;
  }

  /**
   * Sets the value of the 'jobId' field.
   * @param value the value to set.
   */
  public void setJobId(java.lang.CharSequence value) {
    this.jobId = value;
  }

  /**
   * Gets the value of the 'traceId' field.
   * @return The value of the 'traceId' field.
   */
  public java.lang.CharSequence getTraceId() {
    return traceId;
  }

  /**
   * Sets the value of the 'traceId' field.
   * @param value the value to set.
   */
  public void setTraceId(java.lang.CharSequence value) {
    this.traceId = value;
  }

  /**
   * Gets the value of the 'runId' field.
   * @return The value of the 'runId' field.
   */
  public java.lang.CharSequence getRunId() {
    return runId;
  }

  /**
   * Sets the value of the 'runId' field.
   * @param value the value to set.
   */
  public void setRunId(java.lang.CharSequence value) {
    this.runId = value;
  }

  /**
   * Gets the value of the 'productName' field.
   * @return The value of the 'productName' field.
   */
  public java.lang.CharSequence getProductName() {
    return productName;
  }

  /**
   * Sets the value of the 'productName' field.
   * @param value the value to set.
   */
  public void setProductName(java.lang.CharSequence value) {
    this.productName = value;
  }

  /**
   * Gets the value of the 'errorCode' field.
   * @return The value of the 'errorCode' field.
   */
  public java.lang.CharSequence getErrorCode() {
    return errorCode;
  }

  /**
   * Sets the value of the 'errorCode' field.
   * @param value the value to set.
   */
  public void setErrorCode(java.lang.CharSequence value) {
    this.errorCode = value;
  }

  /**
   * Gets the value of the 'errorMsg' field.
   * @return The value of the 'errorMsg' field.
   */
  public java.lang.CharSequence getErrorMsg() {
    return errorMsg;
  }

  /**
   * Sets the value of the 'errorMsg' field.
   * @param value the value to set.
   */
  public void setErrorMsg(java.lang.CharSequence value) {
    this.errorMsg = value;
  }

  /**
   * Gets the value of the 'config' field.
   * @return The value of the 'config' field.
   */
  public java.lang.CharSequence getConfig() {
    return config;
  }

  /**
   * Sets the value of the 'config' field.
   * @param value the value to set.
   */
  public void setConfig(java.lang.CharSequence value) {
    this.config = value;
  }

  /**
   * Creates a new PhErrorMsg RecordBuilder.
   * @return A new PhErrorMsg RecordBuilder
   */
  public static com.pharbers.kafka.schema.PhErrorMsg.Builder newBuilder() {
    return new com.pharbers.kafka.schema.PhErrorMsg.Builder();
  }

  /**
   * Creates a new PhErrorMsg RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PhErrorMsg RecordBuilder
   */
  public static com.pharbers.kafka.schema.PhErrorMsg.Builder newBuilder(com.pharbers.kafka.schema.PhErrorMsg.Builder other) {
    return new com.pharbers.kafka.schema.PhErrorMsg.Builder(other);
  }

  /**
   * Creates a new PhErrorMsg RecordBuilder by copying an existing PhErrorMsg instance.
   * @param other The existing instance to copy.
   * @return A new PhErrorMsg RecordBuilder
   */
  public static com.pharbers.kafka.schema.PhErrorMsg.Builder newBuilder(com.pharbers.kafka.schema.PhErrorMsg other) {
    return new com.pharbers.kafka.schema.PhErrorMsg.Builder(other);
  }

  /**
   * RecordBuilder for PhErrorMsg instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PhErrorMsg>
    implements org.apache.avro.data.RecordBuilder<PhErrorMsg> {

    private java.lang.CharSequence jobId;
    private java.lang.CharSequence traceId;
    private java.lang.CharSequence runId;
    private java.lang.CharSequence productName;
    private java.lang.CharSequence errorCode;
    private java.lang.CharSequence errorMsg;
    private java.lang.CharSequence config;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pharbers.kafka.schema.PhErrorMsg.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.jobId)) {
        this.jobId = data().deepCopy(fields()[0].schema(), other.jobId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.traceId)) {
        this.traceId = data().deepCopy(fields()[1].schema(), other.traceId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.runId)) {
        this.runId = data().deepCopy(fields()[2].schema(), other.runId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.productName)) {
        this.productName = data().deepCopy(fields()[3].schema(), other.productName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.errorCode)) {
        this.errorCode = data().deepCopy(fields()[4].schema(), other.errorCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.errorMsg)) {
        this.errorMsg = data().deepCopy(fields()[5].schema(), other.errorMsg);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.config)) {
        this.config = data().deepCopy(fields()[6].schema(), other.config);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PhErrorMsg instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pharbers.kafka.schema.PhErrorMsg other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.jobId)) {
        this.jobId = data().deepCopy(fields()[0].schema(), other.jobId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.traceId)) {
        this.traceId = data().deepCopy(fields()[1].schema(), other.traceId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.runId)) {
        this.runId = data().deepCopy(fields()[2].schema(), other.runId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.productName)) {
        this.productName = data().deepCopy(fields()[3].schema(), other.productName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.errorCode)) {
        this.errorCode = data().deepCopy(fields()[4].schema(), other.errorCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.errorMsg)) {
        this.errorMsg = data().deepCopy(fields()[5].schema(), other.errorMsg);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.config)) {
        this.config = data().deepCopy(fields()[6].schema(), other.config);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'jobId' field.
      * @return The value.
      */
    public java.lang.CharSequence getJobId() {
      return jobId;
    }

    /**
      * Sets the value of the 'jobId' field.
      * @param value The value of 'jobId'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.PhErrorMsg.Builder setJobId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.jobId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'jobId' field has been set.
      * @return True if the 'jobId' field has been set, false otherwise.
      */
    public boolean hasJobId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'jobId' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.PhErrorMsg.Builder clearJobId() {
      jobId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'traceId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTraceId() {
      return traceId;
    }

    /**
      * Sets the value of the 'traceId' field.
      * @param value The value of 'traceId'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.PhErrorMsg.Builder setTraceId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.traceId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'traceId' field has been set.
      * @return True if the 'traceId' field has been set, false otherwise.
      */
    public boolean hasTraceId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'traceId' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.PhErrorMsg.Builder clearTraceId() {
      traceId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'runId' field.
      * @return The value.
      */
    public java.lang.CharSequence getRunId() {
      return runId;
    }

    /**
      * Sets the value of the 'runId' field.
      * @param value The value of 'runId'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.PhErrorMsg.Builder setRunId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.runId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'runId' field has been set.
      * @return True if the 'runId' field has been set, false otherwise.
      */
    public boolean hasRunId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'runId' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.PhErrorMsg.Builder clearRunId() {
      runId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'productName' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductName() {
      return productName;
    }

    /**
      * Sets the value of the 'productName' field.
      * @param value The value of 'productName'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.PhErrorMsg.Builder setProductName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.productName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'productName' field has been set.
      * @return True if the 'productName' field has been set, false otherwise.
      */
    public boolean hasProductName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'productName' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.PhErrorMsg.Builder clearProductName() {
      productName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'errorCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getErrorCode() {
      return errorCode;
    }

    /**
      * Sets the value of the 'errorCode' field.
      * @param value The value of 'errorCode'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.PhErrorMsg.Builder setErrorCode(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.errorCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'errorCode' field has been set.
      * @return True if the 'errorCode' field has been set, false otherwise.
      */
    public boolean hasErrorCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'errorCode' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.PhErrorMsg.Builder clearErrorCode() {
      errorCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'errorMsg' field.
      * @return The value.
      */
    public java.lang.CharSequence getErrorMsg() {
      return errorMsg;
    }

    /**
      * Sets the value of the 'errorMsg' field.
      * @param value The value of 'errorMsg'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.PhErrorMsg.Builder setErrorMsg(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.errorMsg = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'errorMsg' field has been set.
      * @return True if the 'errorMsg' field has been set, false otherwise.
      */
    public boolean hasErrorMsg() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'errorMsg' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.PhErrorMsg.Builder clearErrorMsg() {
      errorMsg = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'config' field.
      * @return The value.
      */
    public java.lang.CharSequence getConfig() {
      return config;
    }

    /**
      * Sets the value of the 'config' field.
      * @param value The value of 'config'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.PhErrorMsg.Builder setConfig(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.config = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'config' field has been set.
      * @return True if the 'config' field has been set, false otherwise.
      */
    public boolean hasConfig() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'config' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.PhErrorMsg.Builder clearConfig() {
      config = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public PhErrorMsg build() {
      try {
        PhErrorMsg record = new PhErrorMsg();
        record.jobId = fieldSetFlags()[0] ? this.jobId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.traceId = fieldSetFlags()[1] ? this.traceId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.runId = fieldSetFlags()[2] ? this.runId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.productName = fieldSetFlags()[3] ? this.productName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.errorCode = fieldSetFlags()[4] ? this.errorCode : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.errorMsg = fieldSetFlags()[5] ? this.errorMsg : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.config = fieldSetFlags()[6] ? this.config : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
